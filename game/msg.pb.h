// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace pb {
class BroadCast;
struct BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class MovePackege;
struct MovePackegeDefaultTypeInternal;
extern MovePackegeDefaultTypeInternal _MovePackege_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SyncPid;
struct SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPlayers;
struct SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
class Talk;
struct TalkDefaultTypeInternal;
extern TalkDefaultTypeInternal _Talk_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BroadCast* Arena::CreateMaybeMessage<::pb::BroadCast>(Arena*);
template<> ::pb::MovePackege* Arena::CreateMaybeMessage<::pb::MovePackege>(Arena*);
template<> ::pb::Player* Arena::CreateMaybeMessage<::pb::Player>(Arena*);
template<> ::pb::Position* Arena::CreateMaybeMessage<::pb::Position>(Arena*);
template<> ::pb::SyncPid* Arena::CreateMaybeMessage<::pb::SyncPid>(Arena*);
template<> ::pb::SyncPlayers* Arena::CreateMaybeMessage<::pb::SyncPlayers>(Arena*);
template<> ::pb::Talk* Arena::CreateMaybeMessage<::pb::Talk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class SyncPid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SyncPid) */ {
 public:
  inline SyncPid() : SyncPid(nullptr) {}
  ~SyncPid() override;
  explicit PROTOBUF_CONSTEXPR SyncPid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPid(const SyncPid& from);
  SyncPid(SyncPid&& from) noexcept
    : SyncPid() {
    *this = ::std::move(from);
  }

  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
               &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPid& a, SyncPid& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncPid& from) {
    SyncPid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SyncPid";
  }
  protected:
  explicit SyncPid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // string Username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SyncPid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kPFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // string Username = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .pb.Position P = 2;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::pb::Position& p() const;
  PROTOBUF_NODISCARD ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);
  private:
  const ::pb::Position& _internal_p() const;
  ::pb::Position* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::pb::Position* p);
  ::pb::Position* unsafe_arena_release_p();

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::pb::Position* p_;
    int32_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SyncPlayers) */ {
 public:
  inline SyncPlayers() : SyncPlayers(nullptr) {}
  ~SyncPlayers() override;
  explicit PROTOBUF_CONSTEXPR SyncPlayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayers(const SyncPlayers& from);
  SyncPlayers(SyncPlayers&& from) noexcept
    : SyncPlayers() {
    *this = ::std::move(from);
  }

  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
               &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncPlayers& a, SyncPlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPlayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPlayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncPlayers& from) {
    SyncPlayers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SyncPlayers";
  }
  protected:
  explicit SyncPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsFieldNumber = 1,
  };
  // repeated .pb.Player ps = 1;
  int ps_size() const;
  private:
  int _internal_ps_size() const;
  public:
  void clear_ps();
  ::pb::Player* mutable_ps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >*
      mutable_ps();
  private:
  const ::pb::Player& _internal_ps(int index) const;
  ::pb::Player* _internal_add_ps();
  public:
  const ::pb::Player& ps(int index) const;
  ::pb::Player* add_ps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >&
      ps() const;

  // @@protoc_insertion_point(class_scope:pb.SyncPlayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player > ps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVFieldNumber = 4,
    kBloodValueFieldNumber = 5,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float V = 4;
  void clear_v();
  float v() const;
  void set_v(float value);
  private:
  float _internal_v() const;
  void _internal_set_v(float value);
  public:

  // int32 BloodValue = 5;
  void clear_bloodvalue();
  int32_t bloodvalue() const;
  void set_bloodvalue(int32_t value);
  private:
  int32_t _internal_bloodvalue() const;
  void _internal_set_bloodvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float v_;
    int32_t bloodvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MovePackege final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.MovePackege) */ {
 public:
  inline MovePackege() : MovePackege(nullptr) {}
  ~MovePackege() override;
  explicit PROTOBUF_CONSTEXPR MovePackege(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovePackege(const MovePackege& from);
  MovePackege(MovePackege&& from) noexcept
    : MovePackege() {
    *this = ::std::move(from);
  }

  inline MovePackege& operator=(const MovePackege& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovePackege& operator=(MovePackege&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovePackege& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovePackege* internal_default_instance() {
    return reinterpret_cast<const MovePackege*>(
               &_MovePackege_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MovePackege& a, MovePackege& b) {
    a.Swap(&b);
  }
  inline void Swap(MovePackege* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovePackege* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovePackege* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovePackege>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovePackege& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovePackege& from) {
    MovePackege::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovePackege* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.MovePackege";
  }
  protected:
  explicit MovePackege(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kActionDataFieldNumber = 2,
  };
  // .pb.Position P = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::pb::Position& p() const;
  PROTOBUF_NODISCARD ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);
  private:
  const ::pb::Position& _internal_p() const;
  ::pb::Position* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::pb::Position* p);
  ::pb::Position* unsafe_arena_release_p();

  // int32 ActionData = 2;
  void clear_actiondata();
  int32_t actiondata() const;
  void set_actiondata(int32_t value);
  private:
  int32_t _internal_actiondata() const;
  void _internal_set_actiondata(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.MovePackege)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::pb::Position* p_;
    int32_t actiondata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadCast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {}
  ~BroadCast() override;
  explicit PROTOBUF_CONSTEXPR BroadCast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadCast(const BroadCast& from);
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadCast& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kContent = 3,
    kP = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };

  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadCast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadCast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadCast& from) {
    BroadCast::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadCast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BroadCast";
  }
  protected:
  explicit BroadCast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 6,
    kPidFieldNumber = 1,
    kTpFieldNumber = 2,
    kContentFieldNumber = 3,
    kPFieldNumber = 4,
    kActionDataFieldNumber = 5,
  };
  // string Username = 6;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 Pid = 1;
  void clear_pid();
  int32_t pid() const;
  void set_pid(int32_t value);
  private:
  int32_t _internal_pid() const;
  void _internal_set_pid(int32_t value);
  public:

  // int32 Tp = 2;
  void clear_tp();
  int32_t tp() const;
  void set_tp(int32_t value);
  private:
  int32_t _internal_tp() const;
  void _internal_set_tp(int32_t value);
  public:

  // string Content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .pb.Position P = 4;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::pb::Position& p() const;
  PROTOBUF_NODISCARD ::pb::Position* release_p();
  ::pb::Position* mutable_p();
  void set_allocated_p(::pb::Position* p);
  private:
  const ::pb::Position& _internal_p() const;
  ::pb::Position* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::pb::Position* p);
  ::pb::Position* unsafe_arena_release_p();

  // int32 ActionData = 5;
  bool has_actiondata() const;
  private:
  bool _internal_has_actiondata() const;
  public:
  void clear_actiondata();
  int32_t actiondata() const;
  void set_actiondata(int32_t value);
  private:
  int32_t _internal_actiondata() const;
  void _internal_set_actiondata(int32_t value);
  public:

  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:pb.BroadCast)
 private:
  class _Internal;
  void set_has_content();
  void set_has_p();
  void set_has_actiondata();

  inline bool has_Data() const;
  inline void clear_has_Data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int32_t pid_;
    int32_t tp_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
      ::pb::Position* p_;
      int32_t actiondata_;
    } Data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Talk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Talk) */ {
 public:
  inline Talk() : Talk(nullptr) {}
  ~Talk() override;
  explicit PROTOBUF_CONSTEXPR Talk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Talk(const Talk& from);
  Talk(Talk&& from) noexcept
    : Talk() {
    *this = ::std::move(from);
  }

  inline Talk& operator=(const Talk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Talk& operator=(Talk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Talk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Talk* internal_default_instance() {
    return reinterpret_cast<const Talk*>(
               &_Talk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Talk& a, Talk& b) {
    a.Swap(&b);
  }
  inline void Swap(Talk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Talk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Talk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Talk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Talk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Talk& from) {
    Talk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Talk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Talk";
  }
  protected:
  explicit Talk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string Content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:pb.Talk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPid

// int32 Pid = 1;
inline void SyncPid::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t SyncPid::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Pid)
  return _internal_pid();
}
inline void SyncPid::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void SyncPid::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:pb.SyncPid.Pid)
}

// string Username = 2;
inline void SyncPid::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& SyncPid::username() const {
  // @@protoc_insertion_point(field_get:pb.SyncPid.Username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPid::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.SyncPid.Username)
}
inline std::string* SyncPid::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pb.SyncPid.Username)
  return _s;
}
inline const std::string& SyncPid::_internal_username() const {
  return _impl_.username_.Get();
}
inline void SyncPid::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncPid::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncPid::release_username() {
  // @@protoc_insertion_point(field_release:pb.SyncPid.Username)
  return _impl_.username_.Release();
}
inline void SyncPid::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.SyncPid.Username)
}

// -------------------------------------------------------------------

// Player

// int32 Pid = 1;
inline void Player::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t Player::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t Player::pid() const {
  // @@protoc_insertion_point(field_get:pb.Player.Pid)
  return _internal_pid();
}
inline void Player::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void Player::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:pb.Player.Pid)
}

// .pb.Position P = 2;
inline bool Player::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool Player::has_p() const {
  return _internal_has_p();
}
inline void Player::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::pb::Position& Player::_internal_p() const {
  const ::pb::Position* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Position&>(
      ::pb::_Position_default_instance_);
}
inline const ::pb::Position& Player::p() const {
  // @@protoc_insertion_point(field_get:pb.Player.P)
  return _internal_p();
}
inline void Player::unsafe_arena_set_allocated_p(
    ::pb::Position* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Player.P)
}
inline ::pb::Position* Player::release_p() {
  
  ::pb::Position* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Position* Player::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:pb.Player.P)
  
  ::pb::Position* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::pb::Position* Player::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::pb::Position* Player::mutable_p() {
  ::pb::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:pb.Player.P)
  return _msg;
}
inline void Player::set_allocated_p(::pb::Position* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:pb.Player.P)
}

// string Username = 3;
inline void Player::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:pb.Player.Username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Player.Username)
}
inline std::string* Player::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pb.Player.Username)
  return _s;
}
inline const std::string& Player::_internal_username() const {
  return _impl_.username_.Get();
}
inline void Player::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:pb.Player.Username)
  return _impl_.username_.Release();
}
inline void Player::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Player.Username)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .pb.Player ps = 1;
inline int SyncPlayers::_internal_ps_size() const {
  return _impl_.ps_.size();
}
inline int SyncPlayers::ps_size() const {
  return _internal_ps_size();
}
inline void SyncPlayers::clear_ps() {
  _impl_.ps_.Clear();
}
inline ::pb::Player* SyncPlayers::mutable_ps(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SyncPlayers.ps)
  return _impl_.ps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >*
SyncPlayers::mutable_ps() {
  // @@protoc_insertion_point(field_mutable_list:pb.SyncPlayers.ps)
  return &_impl_.ps_;
}
inline const ::pb::Player& SyncPlayers::_internal_ps(int index) const {
  return _impl_.ps_.Get(index);
}
inline const ::pb::Player& SyncPlayers::ps(int index) const {
  // @@protoc_insertion_point(field_get:pb.SyncPlayers.ps)
  return _internal_ps(index);
}
inline ::pb::Player* SyncPlayers::_internal_add_ps() {
  return _impl_.ps_.Add();
}
inline ::pb::Player* SyncPlayers::add_ps() {
  ::pb::Player* _add = _internal_add_ps();
  // @@protoc_insertion_point(field_add:pb.SyncPlayers.ps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Player >&
SyncPlayers::ps() const {
  // @@protoc_insertion_point(field_list:pb.SyncPlayers.ps)
  return _impl_.ps_;
}

// -------------------------------------------------------------------

// Position

// float X = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline float Position::_internal_x() const {
  return _impl_.x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:pb.Position.X)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:pb.Position.X)
}

// float Y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline float Position::_internal_y() const {
  return _impl_.y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:pb.Position.Y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:pb.Position.Y)
}

// float Z = 3;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline float Position::_internal_z() const {
  return _impl_.z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:pb.Position.Z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:pb.Position.Z)
}

// float V = 4;
inline void Position::clear_v() {
  _impl_.v_ = 0;
}
inline float Position::_internal_v() const {
  return _impl_.v_;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:pb.Position.V)
  return _internal_v();
}
inline void Position::_internal_set_v(float value) {
  
  _impl_.v_ = value;
}
inline void Position::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:pb.Position.V)
}

// int32 BloodValue = 5;
inline void Position::clear_bloodvalue() {
  _impl_.bloodvalue_ = 0;
}
inline int32_t Position::_internal_bloodvalue() const {
  return _impl_.bloodvalue_;
}
inline int32_t Position::bloodvalue() const {
  // @@protoc_insertion_point(field_get:pb.Position.BloodValue)
  return _internal_bloodvalue();
}
inline void Position::_internal_set_bloodvalue(int32_t value) {
  
  _impl_.bloodvalue_ = value;
}
inline void Position::set_bloodvalue(int32_t value) {
  _internal_set_bloodvalue(value);
  // @@protoc_insertion_point(field_set:pb.Position.BloodValue)
}

// -------------------------------------------------------------------

// MovePackege

// .pb.Position P = 1;
inline bool MovePackege::_internal_has_p() const {
  return this != internal_default_instance() && _impl_.p_ != nullptr;
}
inline bool MovePackege::has_p() const {
  return _internal_has_p();
}
inline void MovePackege::clear_p() {
  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
}
inline const ::pb::Position& MovePackege::_internal_p() const {
  const ::pb::Position* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Position&>(
      ::pb::_Position_default_instance_);
}
inline const ::pb::Position& MovePackege::p() const {
  // @@protoc_insertion_point(field_get:pb.MovePackege.P)
  return _internal_p();
}
inline void MovePackege::unsafe_arena_set_allocated_p(
    ::pb::Position* p) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.MovePackege.P)
}
inline ::pb::Position* MovePackege::release_p() {
  
  ::pb::Position* temp = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Position* MovePackege::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:pb.MovePackege.P)
  
  ::pb::Position* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::pb::Position* MovePackege::_internal_mutable_p() {
  
  if (_impl_.p_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Position>(GetArenaForAllocation());
    _impl_.p_ = p;
  }
  return _impl_.p_;
}
inline ::pb::Position* MovePackege::mutable_p() {
  ::pb::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:pb.MovePackege.P)
  return _msg;
}
inline void MovePackege::set_allocated_p(::pb::Position* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.p_ = p;
  // @@protoc_insertion_point(field_set_allocated:pb.MovePackege.P)
}

// int32 ActionData = 2;
inline void MovePackege::clear_actiondata() {
  _impl_.actiondata_ = 0;
}
inline int32_t MovePackege::_internal_actiondata() const {
  return _impl_.actiondata_;
}
inline int32_t MovePackege::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.MovePackege.ActionData)
  return _internal_actiondata();
}
inline void MovePackege::_internal_set_actiondata(int32_t value) {
  
  _impl_.actiondata_ = value;
}
inline void MovePackege::set_actiondata(int32_t value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:pb.MovePackege.ActionData)
}

// -------------------------------------------------------------------

// BroadCast

// int32 Pid = 1;
inline void BroadCast::clear_pid() {
  _impl_.pid_ = 0;
}
inline int32_t BroadCast::_internal_pid() const {
  return _impl_.pid_;
}
inline int32_t BroadCast::pid() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Pid)
  return _internal_pid();
}
inline void BroadCast::_internal_set_pid(int32_t value) {
  
  _impl_.pid_ = value;
}
inline void BroadCast::set_pid(int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.Pid)
}

// int32 Tp = 2;
inline void BroadCast::clear_tp() {
  _impl_.tp_ = 0;
}
inline int32_t BroadCast::_internal_tp() const {
  return _impl_.tp_;
}
inline int32_t BroadCast::tp() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Tp)
  return _internal_tp();
}
inline void BroadCast::_internal_set_tp(int32_t value) {
  
  _impl_.tp_ = value;
}
inline void BroadCast::set_tp(int32_t value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.Tp)
}

// string Content = 3;
inline bool BroadCast::_internal_has_content() const {
  return Data_case() == kContent;
}
inline bool BroadCast::has_content() const {
  return _internal_has_content();
}
inline void BroadCast::set_has_content() {
  _impl_._oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  if (_internal_has_content()) {
    _impl_.Data_.content_.Destroy();
    clear_has_Data();
  }
}
inline const std::string& BroadCast::content() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline void BroadCast::set_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  _impl_.Data_.content_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.BroadCast.Content)
}
inline std::string* BroadCast::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Content)
  return _s;
}
inline const std::string& BroadCast::_internal_content() const {
  if (_internal_has_content()) {
    return _impl_.Data_.content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BroadCast::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  _impl_.Data_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadCast::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_Data();
    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  return _impl_.Data_.content_.Mutable(      GetArenaForAllocation());
}
inline std::string* BroadCast::release_content() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Content)
  if (_internal_has_content()) {
    clear_has_Data();
    return _impl_.Data_.content_.Release();
  } else {
    return nullptr;
  }
}
inline void BroadCast::set_allocated_content(std::string* content) {
  if (has_Data()) {
    clear_Data();
  }
  if (content != nullptr) {
    set_has_content();
    _impl_.Data_.content_.InitAllocated(content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.Content)
}

// .pb.Position P = 4;
inline bool BroadCast::_internal_has_p() const {
  return Data_case() == kP;
}
inline bool BroadCast::has_p() const {
  return _internal_has_p();
}
inline void BroadCast::set_has_p() {
  _impl_._oneof_case_[0] = kP;
}
inline void BroadCast::clear_p() {
  if (_internal_has_p()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Data_.p_;
    }
    clear_has_Data();
  }
}
inline ::pb::Position* BroadCast::release_p() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.P)
  if (_internal_has_p()) {
    clear_has_Data();
    ::pb::Position* temp = _impl_.Data_.p_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::pb::Position& BroadCast::_internal_p() const {
  return _internal_has_p()
      ? *_impl_.Data_.p_
      : reinterpret_cast< ::pb::Position&>(::pb::_Position_default_instance_);
}
inline const ::pb::Position& BroadCast::p() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.P)
  return _internal_p();
}
inline ::pb::Position* BroadCast::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pb.BroadCast.P)
  if (_internal_has_p()) {
    clear_has_Data();
    ::pb::Position* temp = _impl_.Data_.p_;
    _impl_.Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BroadCast::unsafe_arena_set_allocated_p(::pb::Position* p) {
  clear_Data();
  if (p) {
    set_has_p();
    _impl_.Data_.p_ = p;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.BroadCast.P)
}
inline ::pb::Position* BroadCast::_internal_mutable_p() {
  if (!_internal_has_p()) {
    clear_Data();
    set_has_p();
    _impl_.Data_.p_ = CreateMaybeMessage< ::pb::Position >(GetArenaForAllocation());
  }
  return _impl_.Data_.p_;
}
inline ::pb::Position* BroadCast::mutable_p() {
  ::pb::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.P)
  return _msg;
}

// int32 ActionData = 5;
inline bool BroadCast::_internal_has_actiondata() const {
  return Data_case() == kActionData;
}
inline bool BroadCast::has_actiondata() const {
  return _internal_has_actiondata();
}
inline void BroadCast::set_has_actiondata() {
  _impl_._oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  if (_internal_has_actiondata()) {
    _impl_.Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline int32_t BroadCast::_internal_actiondata() const {
  if (_internal_has_actiondata()) {
    return _impl_.Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::_internal_set_actiondata(int32_t value) {
  if (!_internal_has_actiondata()) {
    clear_Data();
    set_has_actiondata();
  }
  _impl_.Data_.actiondata_ = value;
}
inline int32_t BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.ActionData)
  return _internal_actiondata();
}
inline void BroadCast::set_actiondata(int32_t value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:pb.BroadCast.ActionData)
}

// string Username = 6;
inline void BroadCast::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& BroadCast::username() const {
  // @@protoc_insertion_point(field_get:pb.BroadCast.Username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadCast::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.BroadCast.Username)
}
inline std::string* BroadCast::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:pb.BroadCast.Username)
  return _s;
}
inline const std::string& BroadCast::_internal_username() const {
  return _impl_.username_.Get();
}
inline void BroadCast::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadCast::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadCast::release_username() {
  // @@protoc_insertion_point(field_release:pb.BroadCast.Username)
  return _impl_.username_.Release();
}
inline void BroadCast::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.BroadCast.Username)
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Talk

// string Content = 1;
inline void Talk::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Talk::content() const {
  // @@protoc_insertion_point(field_get:pb.Talk.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Talk::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Talk.Content)
}
inline std::string* Talk::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pb.Talk.Content)
  return _s;
}
inline const std::string& Talk::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Talk::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Talk::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Talk::release_content() {
  // @@protoc_insertion_point(field_release:pb.Talk.Content)
  return _impl_.content_.Release();
}
inline void Talk::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Talk.Content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
